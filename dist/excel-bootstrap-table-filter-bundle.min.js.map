{"version":3,"sources":["../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["target","th","column","index","options","tds","find","this","toArray","menu","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","click","toggle","document","el","is","has","length","hide","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","forEach","searchFilter","val","i","td","self","innerText","dropdownFilterItem","createElement","className","type","trim","replace","setAttribute","toString","innerHTML","captions","select_all","dropdownFilterItemSelectAll","search","direction","span","split","join","dropdownFilterContent","count","innerDivs","reduce","arr","elt","undefined","elc","cloneNode","push","map","v","String","sort","a","b","A","B","isNaN","Number","_this","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","dropdownFilterSearch","outerDiv","innerDiv","elements","concat","dropdownFilterSort","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","ths","columnSelector","filterMenus","FilterMenu","rows","table","get","tbody","filterMenu","initialize","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","updateRowVisibility","change","data","updateSelectAll","selectAllUpdate","$sortElement","order","attr","keyup","$input","searchToggle","showRows","hideRows","selectedLists","Set","found","j","content","selected","show","flip","toUpperCase","fn","excelTableFilter","extend","filterCollection","FilterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export class FilterMenu {\n\n  th:                 Element;\n  tds:                Array<Element>;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n\n  constructor (target: JQuery, th: Element, column: number, index: number, options: Options) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.tds = target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ *$/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.className = 'dropdown-filter-content';\n\n    let count : {[element : string] : number} = {};\n    let innerDivs = this.tds.reduce(function(arr, el: HTMLElement) {\n      // get unique values in column\n      let elt = el.innerText.trim()\n      if (count[elt] === undefined) {\n        let elc = el.cloneNode(true)\n        arr.push(elc);\n        count[elt] = 1\n      } else {\n        count[elt] += 1\n      }\n      // return unique values\n      //console.log(arr)\n      return arr;\n    }, [])\n    .map(function(v) { v.innerText += ' (' + String(count[v.innerText.trim()]) + ')'; return v; })\n    .sort(function(a, b) {\n      // sort values for display in dropdown\n      var A = a.innerText.toLowerCase();\n      var B = b.innerText.toLowerCase();\n\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\n\n        // handle numbers\n        if(Number(A) < Number(B)) return -1;\n        if(Number(A) > Number(B)) return  1;\n\n      } else {\n\n        // handle strings\n        if(A < B) return -1;\n        if(A > B) return  1;\n\n      }\n      //return a.innerText.toLowerCase() > b.innerText.toLowerCase() ? 1 : -1;\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    dropdownFilterDropdown.appendChild(this.dropdownFilterContent());\n\n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","import { FilterMenu } from './FilterMenu'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<Element>;\n  ths:          Array<Element>;\n  table:        Element;\n  tbody:        Element;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map(function(th: HTMLElement, index: number) {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n    this.tbody = target.find('tbody').get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      let value = $(this).val();\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-search').keyup(function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<Element>, ths: Array<Element>, tbody:Element): void {\n    let showRows = rows;\n    let hideRows: Array<Element> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: new Set(filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ *\\(\\d+\\)$/g,'');\n          }))\n      };\n    });\n    if (rows.length > 100)\n      $(tbody).hide();\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      let found : boolean = true\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ *$/g,'')\n        if (!selectedLists[j].selected.has(content)) {\n          $(rows[i]).hide();\n          found = false\n          break;\n        }\n      }\n      if (found)\n        $(rows[i]).show();\n}\n    if (rows.length > 100)\n      $(tbody).show();\n  }\n\n  private sort(column: number, order: string, table: Element, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    let tbody = $(table).find('tbody').get(0);\n    let rows = $(tbody).find('tr').get();\n\n    rows.sort(function(a, b) {\n      var A = (a.children[column] as HTMLElement).innerText.toUpperCase();\n      var B = (b.children[column] as HTMLElement).innerText.toUpperCase();\n\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\n        // handle numbers\n        if(Number(A) < Number(B)) return -1*flip;\n        if(Number(A) > Number(B)) return  1*flip;\n      } else {\n        // handle strings\n        if(A < B) return -1*flip;\n        if(A > B) return  1*flip;\n      }\n      return 0;\n    });\n\n    for (var i=0; i < rows.length; i++) {\n      tbody.appendChild(rows[i]);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n\n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n"]}